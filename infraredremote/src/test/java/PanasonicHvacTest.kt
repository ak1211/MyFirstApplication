package com.example.infraredremote


import arrow.core.*
import com.example.infraredremote.device.PanasonicHvac.*
import org.junit.Test
import org.junit.Assert.*

import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.json.*
import org.junit.Ignore


/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class PanasonicHvacTest {
    @Test
    fun test_PanasonicHvac_FirstFrame() {
        val frame = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                fromMsbFirstHexadecimalString("4004072000000060").orNull()!!,
                nonEmptyListOf(Bit(1))
            ).flatten()
        )
        assertEquals(frame, constantFirstFrame)
    }

    @Test
    fun test_PanasonicHvac1() {
        // @formatter:off
        val code = "[3474,1753,414,467,414,1342,414,469,413,470,386,469,387,472,385,472,386,466,413,467,412,469,414,469,413,470,386,469,387,1345,387,472,386,466,414,468,413,468,413,468,414,469,387,472,384,1346,387,1346,386,1340,414,467,414,468,413,1343,415,469,386,470,385,471,386,472,386,467,413,467,413,469,414,468,414,470,386,470,386,471,387,471,387,466,413,468,414,468,413,469,414,470,386,470,385,470,388,472,386,466,414,468,414,468,414,468,414,470,386,470,386,470,386,472,386,466,414,467,414,1342,414,1343,414,470,386,471,386,471,387,471,387,461,413,10192,3476,1753,414,468,413,1342,414,469,413,470,387,469,387,471,386,472,386,465,415,466,415,468,413,469,414,470,386,470,387,1345,387,471,387,465,415,467,414,468,415,468,414,469,386,470,387,1344,387,1346,386,1340,414,467,414,468,413,1342,415,470,386,470,386,471,387,471,386,466,414,468,413,467,415,468,414,471,385,470,387,470,387,471,386,467,414,1340,415,467,414,469,413,1344,388,1343,386,1345,388,471,386,466,413,467,415,467,415,1343,414,469,387,1343,387,1345,387,471,387,465,414,467,414,467,415,468,414,470,386,470,387,471,387,470,388,1340,414,1341,415,1342,415,1343,414,1344,387,469,388,1344,387,472,387,1340,415,1340,416,468,413,1343,414,1344,387,470,386,1344,389,470,387,1339,415,467,414,467,414,469,414,469,387,468,388,470,386,472,386,466,415,466,415,1341,415,1341,416,1344,386,471,386,471,386,471,387,466,414,467,414,467,415,468,414,470,386,470,387,1345,388,1344,388,1340,415,466,415,467,414,469,414,469,387,470,387,469,388,1345,387,466,414,466,415,467,414,468,414,469,387,469,387,471,386,472,387,465,415,466,414,1342,415,1341,416,470,386,470,387,471,387,470,387,1339,414,466,415,467,414,469,413,469,387,468,389,1343,387,1344,389,465,414,467,414,468,414,1342,415,1343,388,1343,388,470,387,472,387,1339,415,1340,414,1343,414,1342,415,1343,387,1342,389,1345,387,1345,389,1333,415]"
        val inp = Json.decodeFromString<List<Int>>(ListSerializer(Int.serializer()), code)
        // @formatter:on
        val panasonicHvac = PanasonicHvac(
            Celsius(26),
            Mode.Cool,
            Switch.On,
            Swing.Auto,
            Fan.Auto,
            64U,
            255U
        )
        val expect =
            Either.Right(nonEmptyListOf(panasonicHvac))
        val out = decodeToIrRemoteControlCode(fromIntList(inp))
        assertEquals(expect, out)
        //
        val binary = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                "01000000",
                "00000100",
                "00000111",
                "00100000",
                "00000000",
                "10011100", // Byte #6 -> 00111001(bitflipped) mode[7:4] -> 0011(cool), switch[0] -> 1(on)
                "00101100", // Byte #7 -> 00110100(bitflipped)[4:1] -> 1010 -> 8+2 +(offset 16C) -> 26C
                "00000001",
                "11110101", // Byte #9 -> 10101111(bitflipped) fan[7:4] -> 1010(auto), swing[3:0] -> 1111(auto)
                "10110101",
                "00000000",
                "01110000",
                "00000111",
                "00000010", // Byte#14 -> 01000000(bitflipped) profile[7:0] -> 64
                "00000000",
                "01100001",
                "00000110",
                "00111001",
                "11111111", // Byte#19 -> checksum
            ).traverseEither { fromBinaryString(it) }.map { it.flatten() }.orNull()!!
        )
        assertEquals(
            Either.Right(listOf(constantFirstFrame, binary)),
            decodeToIrCodeFrames(fromIntList(inp))
        )
        val encoded = encodePanasonicHvac(panasonicHvac)
        assertEquals(constantFirstFrame, encoded[0])
        assertEquals(binary, encoded[1])
    }

    @Test
    fun test_PanasonicHvac2() {
        // @formatter:off
        val code = "[3475,1751,416,467,415,1341,415,468,415,469,388,469,386,470,387,471,388,465,414,466,414,467,415,468,415,470,386,469,387,1345,388,471,386,464,415,467,415,467,414,468,414,468,388,469,387,1343,388,1346,388,1339,415,468,414,467,414,1341,415,470,387,470,386,470,386,471,388,466,414,466,414,467,414,467,417,470,386,470,387,469,388,470,387,466,414,466,414,466,416,467,416,470,386,469,387,471,388,471,387,465,414,466,415,467,415,468,415,468,387,468,388,470,387,471,387,465,414,467,415,1342,414,1341,414,470,388,470,387,471,386,470,388,460,415,10192,3478,1750,416,466,414,1340,416,468,415,470,386,468,387,471,387,472,386,465,414,465,416,467,415,468,414,469,387,468,389,1344,387,470,389,465,415,466,415,467,414,467,415,468,389,470,386,1343,390,1345,387,1338,417,467,414,467,414,1341,416,468,388,469,387,470,386,470,389,466,414,467,414,467,414,467,417,469,387,468,388,469,388,470,389,464,415,1339,417,466,415,468,415,1342,388,1343,388,1342,389,471,388,465,414,466,414,466,417,468,415,469,387,1342,390,1344,387,470,388,464,417,466,415,467,414,467,415,467,389,469,388,469,387,469,389,1339,415,1339,417,1340,416,1340,416,1343,389,469,387,1343,390,470,388,1337,416,1340,416,467,415,1341,416,1342,389,468,388,1342,390,470,389,1337,416,466,417,466,415,466,416,468,389,468,388,469,388,468,390,464,415,465,415,1339,417,1341,415,1341,390,468,388,469,388,469,390,465,414,465,415,465,416,467,416,468,388,468,388,1343,389,1344,388,1339,416,466,415,467,415,467,415,466,391,469,387,469,388,1343,391,464,415,466,415,466,416,465,418,467,389,468,387,468,390,470,388,464,415,465,416,1341,416,1340,415,469,389,468,388,469,387,470,389,1338,416,464,416,467,416,467,415,467,388,467,389,1343,390,1342,389,464,416,465,415,466,415,1340,417,1342,389,1341,391,468,389,469,388,1337,418,1340,416,1339,417,467,417,1342,388,1341,390,1343,389,1342,391,1333,416]"
        val inp = Json.decodeFromString<List<Int>>(ListSerializer(Int.serializer()), code)
        // @formatter:on
        val panasonicHvac = PanasonicHvac(

            Celsius(24),
            Mode.Cool,
            Switch.On,
            Swing.Auto,
            Fan.Auto,
            64U,
            251U
        )
        val expect =
            Either.Right(nonEmptyListOf(panasonicHvac))
        val out = decodeToIrRemoteControlCode(fromIntList(inp))
        assertEquals(expect, out)
        //
        val binary = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                "01000000",
                "00000100",
                "00000111",
                "00100000",
                "00000000",
                "10011100", // Byte #6 -> 00111001(bitflipped) mode[7:4] -> 0011(cool), switch[0] -> 1(on)
                "00001100", // Byte #7 -> 00110000(bitflipped)[4:1] -> 1000 -> 8 +(offset 16C) -> 24C
                "00000001",
                "11110101", // Byte #9 -> 10101111(bitflipped) fan[7:4] -> 1010(auto), swing[3:0] -> 1111(auto)
                "10110101",
                "00000000",
                "01110000",
                "00000111",
                "00000010", // Byte#14 -> 01000000(bitflipped) profile[7:0] -> 64
                "00000000",
                "01100001",
                "00000110",
                "00111001",
                "11011111", // Byte#19 -> checksum
            ).traverseEither { fromBinaryString(it) }.map { it.flatten() }.orNull()!!
        )
        assertEquals(
            Either.Right(listOf(constantFirstFrame, binary)),
            decodeToIrCodeFrames(fromIntList(inp))

        )
        val encoded = encodePanasonicHvac(panasonicHvac)
        assertEquals(constantFirstFrame, encoded[0])
        assertEquals(binary, encoded[1])
    }

    @Test
    fun test_PanasonicHvac3() {
        // @formatter:off
        val code = "[3476,1752,414,467,414,1341,416,468,415,469,387,468,388,469,387,470,388,466,414,467,415,465,416,469,413,470,386,470,388,1344,388,471,387,464,415,464,417,467,415,468,415,468,388,468,388,1343,388,1345,388,1339,414,467,415,467,415,1342,415,468,388,469,387,470,387,471,388,464,415,466,415,466,416,468,415,469,388,471,385,471,387,471,388,465,414,466,415,467,415,468,415,467,388,469,388,469,389,470,388,465,414,466,415,467,414,468,415,468,388,470,387,469,388,470,387,465,415,466,415,1340,416,1342,414,469,388,468,389,469,387,472,387,460,415,10201,3476,1752,414,466,415,1341,416,468,414,468,389,469,387,468,389,472,386,465,415,466,415,466,415,467,415,469,387,469,388,1344,387,472,387,465,416,465,415,467,415,468,415,469,387,468,389,1344,388,1344,389,1340,414,466,416,467,415,1341,416,468,388,469,388,469,388,470,388,463,416,466,415,467,415,467,415,468,388,469,388,469,388,469,388,465,416,466,415,467,415,467,415,1342,388,469,388,470,387,1344,389,464,415,466,415,466,416,467,415,1342,389,1343,388,1343,389,470,388,465,415,465,415,466,416,468,414,469,387,469,389,469,387,470,387,1339,416,1339,416,1341,416,1341,415,1342,388,468,389,1343,388,471,388,1339,416,1339,416,467,414,1341,416,1342,390,468,388,1342,389,472,387,1338,417,465,416,467,415,467,415,468,388,467,389,469,388,470,388,464,416,465,415,1340,416,1340,417,1342,388,468,389,469,388,470,389,464,415,465,416,467,415,467,415,468,389,468,388,1343,389,1343,390,1339,416,465,416,466,415,467,415,468,388,469,387,468,390,470,388,464,415,466,416,466,415,467,415,468,388,468,388,469,388,469,388,465,415,466,415,1340,416,1340,417,469,387,468,389,469,389,469,388,1339,416,465,415,465,416,467,415,468,387,469,389,1342,388,1345,389,464,416,465,415,466,415,1341,416,1342,388,1343,389,469,388,471,387,1339,417,465,416,1340,416,467,415,468,388,1342,389,468,389,1344,388,1333,416]"
        val inp = Json.decodeFromString<List<Int>>(ListSerializer(Int.serializer()), code)
        // @formatter:on
        val panasonicHvac = PanasonicHvac(

            Celsius(28),
            Mode.Heat,
            Switch.Off,
            Swing.Auto,
            Fan.Auto,
            0U,
            210U
        )
        val expect = Either.Right(nonEmptyListOf(panasonicHvac))
        val out = decodeToIrRemoteControlCode(fromIntList(inp))
        assertEquals(expect, out)
        //
        val binary = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                "01000000",
                "00000100",
                "00000111",
                "00100000",
                "00000000",
                "00010010", // Byte #6 -> 01001000(bitflipped) mode[7:4] -> 0100(heat), switch[0] -> 0(off)
                "00011100", // Byte #7 -> 00111000(bitflipped)[4:1] -> 1100 -> 8+4 +(offset 16C) -> 28C
                "00000001",
                "11110101", // Byte #9 -> 10101111(bitflipped) fan[7:4] -> 1010(auto), swing[3:0] -> 1111(auto)
                "10110101",
                "00000000",
                "01110000",
                "00000111",
                "00000000", // Byte#14 -> 00000000(bitflipped) profile[7:0] -> 0
                "00000000",
                "01100001",
                "00000110",
                "00111001",
                "01001011", // Byte#19 -> checksum
            ).traverseEither { fromBinaryString(it) }.map { it.flatten() }.orNull()!!
        )
        assertEquals(
            Either.Right(listOf(constantFirstFrame, binary)),
            decodeToIrCodeFrames(fromIntList(inp))
        )
        val encoded = encodePanasonicHvac(panasonicHvac)
        assertEquals(constantFirstFrame, encoded[0])
        assertEquals(binary, encoded[1])
    }

    @Ignore("Byte #15 is unknown")
    @Test
    fun test_PanasonicHvac4() {
        // @formatter:off
        val code = "[3478,1750,416,465,416,1340,416,467,416,467,388,470,387,469,389,468,390,464,416,465,416,466,417,465,415,468,388,468,389,1343,389,471,387,464,416,464,417,465,416,466,417,467,389,467,389,1343,389,1343,390,1337,416,466,416,465,417,1340,417,468,389,466,389,468,389,469,389,463,416,463,418,465,416,466,417,467,390,467,389,468,389,469,388,464,416,465,417,465,416,466,417,467,390,467,389,468,390,469,389,462,418,465,416,465,416,466,417,467,389,468,389,468,390,468,390,463,416,464,417,1338,418,1339,418,467,389,467,390,466,391,468,390,457,418,10191,3478,1749,418,464,417,1338,418,465,417,467,389,467,390,467,390,467,390,462,417,464,417,464,418,466,417,467,389,466,390,1341,390,469,390,463,417,463,418,464,418,466,417,466,390,466,390,1341,390,1341,391,1336,419,463,418,464,418,1339,418,466,390,466,390,468,389,469,389,462,419,463,418,464,418,465,417,466,391,465,391,467,390,469,389,462,417,1337,418,465,417,465,418,1339,391,466,390,468,390,1342,391,462,417,463,418,465,417,1339,418,1339,392,1340,391,1341,391,468,390,462,418,462,417,464,417,465,417,466,391,466,391,467,390,467,390,1336,419,1337,418,1338,418,1339,419,1339,392,466,391,1341,391,468,390,1336,419,1337,418,464,418,1339,418,1340,390,466,391,1341,391,467,391,1335,420,462,418,464,418,465,418,465,391,466,391,467,390,467,391,462,418,462,419,1338,419,1338,419,1339,392,467,390,467,391,467,391,461,418,463,418,464,418,464,418,464,392,466,390,1340,393,1341,391,1336,419,462,419,463,418,465,417,465,393,464,391,466,391,468,391,461,418,463,418,1337,419,465,419,465,391,465,391,466,391,467,392,461,418,462,419,1338,418,1338,419,465,391,465,392,467,391,467,392,1335,420,461,420,463,419,464,419,464,392,465,391,1340,392,1341,391,462,418,461,420,464,418,1338,419,1339,392,1339,392,465,392,467,390,1335,420,1335,420,463,419,464,419,1339,392,1338,393,465,392,1340,392,1328,421]"
        val inp = Json.decodeFromString<List<Int>>(ListSerializer(Int.serializer()), code)
        // @formatter:on
        val panasonicHvac = PanasonicHvac(

            Celsius(30),
            Mode.Heat,
            Switch.On,
            Swing.Auto,
            Fan.Auto,
            0U,
            217U
        )
        val expect = Either.Right(nonEmptyListOf(panasonicHvac))
        val out = decodeToIrRemoteControlCode(fromIntList(inp))
        assertEquals(expect, out)
        //
        val binary = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                "01000000",
                "00000100",
                "00000111",
                "00100000",
                "00000000",
                "10010010", // Byte #6 -> 01001001(bitflipped) mode[7:4] -> 0100(heat), switch[0] -> 1(off)
                "00111100", // Byte #7 -> 00111100(bitflipped)[4:1] -> 1110 -> 8+4+2 +(offset 16C) -> 30C
                "00000001",
                "11110101", // Byte #9 -> 10101111(bitflipped) fan[7:4] -> 1010(auto), swing[3:0] -> 1111(auto)
                "10110101",
                "00000000",
                "01110000",
                "00000111",
                "00000000", // Byte#14 -> 00000000(bitflipped) profile[7:0] -> 0
                "01000000", // Byte#15 -> ????
                "01100001",
                "00000110",
                "00111001",
                "10011011", // Byte#19 -> checksum
            ).traverseEither { fromBinaryString(it) }.map { it.flatten() }.orNull()!!
        )
        assertEquals(
            Either.Right(listOf(constantFirstFrame, binary)),
            decodeToIrCodeFrames(fromIntList(inp))
        )
        val encoded = encodePanasonicHvac(panasonicHvac)
        assertEquals(constantFirstFrame, encoded[0])
        assertEquals(binary, encoded[1])
    }

    @Test
    fun test_PanasonicHvac5() {
        // @formatter:off
        val code = "[3477,1749,417,466,415,1340,416,468,415,468,388,469,388,470,387,470,388,464,416,465,415,466,416,466,416,468,388,468,389,1344,388,470,388,465,415,465,416,466,416,467,416,468,388,468,388,1343,389,1344,388,1339,416,465,416,465,417,1341,416,468,389,467,388,469,388,470,388,464,416,465,416,466,416,467,416,468,389,467,389,469,388,470,388,463,416,465,416,465,416,468,415,467,389,467,389,469,387,470,388,464,416,466,415,466,416,466,416,469,388,468,389,469,389,469,388,465,416,465,415,1340,418,1340,417,467,389,468,388,469,389,469,389,458,416,10191,3478,1749,417,465,416,1339,417,466,417,468,388,467,389,469,389,468,389,464,416,466,415,466,415,465,417,467,388,468,388,1343,390,469,389,464,416,463,417,466,416,466,416,467,388,468,389,1342,390,1343,390,1338,417,464,417,465,416,1340,417,467,389,466,390,469,388,469,389,463,417,464,416,466,417,467,416,467,389,467,389,469,388,468,390,462,416,1339,417,465,416,466,417,1342,389,469,388,1342,389,470,388,463,417,463,417,1339,417,466,417,466,389,1342,390,1341,391,469,389,463,416,465,416,464,417,465,418,467,389,467,389,469,389,469,389,1337,417,1338,417,1339,417,1340,418,1340,390,467,390,1342,390,468,391,1337,417,1338,417,465,416,1339,418,1341,389,467,389,1341,391,468,390,1337,418,464,417,465,416,466,417,467,390,466,389,468,389,469,389,462,418,464,417,1339,417,1340,417,1341,389,467,390,469,388,469,389,463,417,464,417,465,417,466,417,467,390,466,390,1341,391,1343,390,1336,417,464,417,465,416,465,417,466,390,467,389,468,389,1344,390,462,418,465,416,465,416,466,418,465,390,467,389,468,390,468,390,461,418,464,417,1339,418,1338,418,467,389,467,390,467,390,469,389,1336,418,464,417,465,417,466,417,466,390,466,390,1341,391,1343,390,463,417,464,416,464,418,1339,418,1340,390,1341,390,467,390,467,390,1337,417,1339,417,464,417,1339,418,1341,390,467,389,1342,390,1343,390,1332,417]"
        val inp = Json.decodeFromString<List<Int>>(ListSerializer(Int.serializer()), code)
        // @formatter:on
        val panasonicHvac = PanasonicHvac(

            Celsius(25),
            Mode.Dry,
            Switch.On,
            Swing.Auto,
            Fan.Auto,
            64U,
            237U
        )
        val expect = Either.Right(nonEmptyListOf(panasonicHvac))
        val out = decodeToIrRemoteControlCode(fromIntList(inp))
        assertEquals(expect, out)
        val binary = InfraredCodeFrame.ProtocolAeha(
            nonEmptyListOf(
                "01000000",
                "00000100",
                "00000111",
                "00100000",
                "00000000",
                "10010100", // Byte #6 -> 00101001(bitflipped) mode[7:4] -> 0010(dry), switch[0] -> 1(off)
                "01001100", // Byte #7 -> 00110010(bitflipped) temp[4:1] -> 1001 -> 8+1 +(offset 16C) -> 25C
                "00000001",
                "11110101", // Byte #9 -> 10101111(bitflipped) fan[7:4] -> 1010(auto), swing[3:0] -> 1111(auto)
                "10110101",
                "00000000",
                "01110000",
                "00000111",
                "00000010", // Byte#14 -> 01000000(bitflipped) profile[7:0] -> 64
                "00000000",
                "01100001",
                "00000110",
                "00111001",
                "10110111", // Byte#19 -> checksum
            ).traverseEither { fromBinaryString(it) }.map { it.flatten() }.orNull()!!
        )
        assertEquals(
            Either.Right(listOf(constantFirstFrame, binary)),
            decodeToIrCodeFrames(fromIntList(inp))
        )
        val encoded = encodePanasonicHvac(panasonicHvac)
        assertEquals(constantFirstFrame, encoded[0])
        assertEquals(binary, encoded[1])
    }
}